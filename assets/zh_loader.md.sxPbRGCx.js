import{_ as s,c as t,o as i,ag as e}from"./chunks/framework.C6Ot-a7E.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/loader.md","filePath":"zh/loader.md","lastUpdated":1748703471000}'),n={name:"zh/loader.md"};function d(l,a,r,o,p,h){return i(),t("div",null,a[0]||(a[0]=[e(`<h3 id="引入" tabindex="-1">引入 <a class="header-anchor" href="#引入" aria-label="Permalink to &quot;引入&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loader,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loaderUnity,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loadJS,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loadCSS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;t-comm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不支持 tree-shaking 的项目</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loader,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loaderUnity,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loadJS,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loadCSS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;t-comm/lib/loader/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只支持 ESM 的项目</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loader,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loaderUnity,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loadJS,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  loadCSS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;t-comm/es/loader/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="loader" tabindex="-1"><code>loader</code> <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;\`loader\`&quot;">​</a></h3><p><strong>描述</strong>：<p>以 Callback 的方式加载 js 文件</p></p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>src</td><td><code>String</code></td><td><p>js文件路径</p></td></tr><tr><td>callback</td><td><code>function</code> | <code>Object</code></td><td><p>加载回调</p></td></tr><tr><td>charset</td><td><code>String</code></td><td><p>指定js的字符集</p></td></tr><tr><td>context</td><td><code>Object</code></td><td><p>Callback context</p></td></tr></tbody></table><ul><li><a href="#loader"><code>loader</code></a><ul><li><a href="#loader..privateFinish"><code>~privateFinish()</code></a> ⇒ <code>void</code></li><li><a href="#loader..privateError"><code>~privateError()</code></a> ⇒ <code>void</code></li></ul></li></ul><p><a name="loader..privateFinish"></a></p><h4 id="loader-privatefinish-⇒-void" tabindex="-1"><code>loader~privateFinish()</code> ⇒ <code>void</code> <a class="header-anchor" href="#loader-privatefinish-⇒-void" aria-label="Permalink to &quot;\`loader~privateFinish()\` ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h4><p>Final handler for error or completion.</p><p><strong>Note</strong>: Will only be called <em>once</em>.</p><p><strong>Kind</strong>: inner method of <a href="#loader"><code>loader</code></a><br><a name="loader..privateError"></a></p><h4 id="loader-privateerror-⇒-void" tabindex="-1"><code>loader~privateError()</code> ⇒ <code>void</code> <a class="header-anchor" href="#loader-privateerror-⇒-void" aria-label="Permalink to &quot;\`loader~privateError()\` ⇒ &lt;code&gt;void&lt;/code&gt;&quot;">​</a></h4><p>Error handler</p><p><strong>Kind</strong>: inner method of <a href="#loader"><code>loader</code></a><br><a name="loaderUnity"></a></p><h3 id="loaderunity" tabindex="-1"><code>loaderUnity</code> <a class="header-anchor" href="#loaderunity" aria-label="Permalink to &quot;\`loaderUnity\`&quot;">​</a></h3><p><strong>描述</strong>：<p>以 Promise 或者 Callback 的方式加载 js 文件，取决于是否传递 Callback</p></p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td><code>string</code></td><td><p>js文件路径</p></td></tr><tr><td>[cb]</td><td><code>function</code></td><td><p>回调</p></td></tr></tbody></table><p><strong>返回</strong>: <code>Promise.&lt;number&gt;</code><br></p><p>promise</p><p><a name="loadJS"></a></p><h3 id="loadjs-url" tabindex="-1"><code>loadJS(url)</code> <a class="header-anchor" href="#loadjs-url" aria-label="Permalink to &quot;\`loadJS(url)\`&quot;">​</a></h3><p><strong>描述</strong>：<p>以 Promise 的方式加载 js 文件</p></p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td><code>string</code></td><td><p>js文件路径</p></td></tr></tbody></table><p><strong>返回</strong>: <code>Promise.&lt;number&gt;</code><br></p><p>promise</p><p><a name="loadCSS"></a></p><h3 id="loadcss-url" tabindex="-1"><code>loadCSS(url)</code> <a class="header-anchor" href="#loadcss-url" aria-label="Permalink to &quot;\`loadCSS(url)\`&quot;">​</a></h3><p><strong>描述</strong>：<p>动态加载CSS</p></p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td><code>string</code></td><td><p>CSS链接</p></td></tr></tbody></table><p><strong>示例</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadCSS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,35)]))}const E=s(n,[["render",d]]);export{k as __pageData,E as default};
