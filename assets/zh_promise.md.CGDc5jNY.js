import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.C6Ot-a7E.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/promise.md","filePath":"zh/promise.md","lastUpdated":1748703471000}'),n={name:"zh/promise.md"};function p(o,s,l,r,h,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h3 id="引入" tabindex="-1">引入 <a class="header-anchor" href="#引入" aria-label="Permalink to &quot;引入&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { toPromise } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;t-comm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不支持 tree-shaking 的项目</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { toPromise} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;t-comm/lib/promise/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只支持 ESM 的项目</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { toPromise} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;t-comm/es/promise/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="topromise-promiselike" tabindex="-1"><code>toPromise(promiseLike)</code> <a class="header-anchor" href="#topromise-promiselike" aria-label="Permalink to &quot;\`toPromise(promiseLike)\`&quot;">​</a></h3><p><strong>描述</strong>：<p>将函数转成 Promise</p></p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>promiseLike</td><td><code>function</code></td><td><p>任意函数，可以为 Promise</p></td></tr></tbody></table><p><strong>返回</strong>: <p>Promise 函数</p></p><p><strong>示例</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const bar = () =&gt; 1;</span></span>
<span class="line"><span>toPromise(bar()).then(res =&gt; console.log(res)); // 1</span></span>
<span class="line"><span>function foo() {</span></span>
<span class="line"><span>  return new Promise(resolve =&gt; setTimeout(() =&gt; resolve(2), 1000));</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>toPromise(foo()).then(res =&gt; console.log(res)); // 2</span></span></code></pre></div>`,9)]))}const m=i(n,[["render",p]]);export{c as __pageData,m as default};
