import{_ as t,c as i,o as a,ag as n}from"./chunks/framework.C6Ot-a7E.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh/git.md","filePath":"zh/git.md","lastUpdated":1748703471000}'),e={name:"zh/git.md"};function p(l,s,h,r,o,g){return a(),i("div",null,s[0]||(s[0]=[n(`<h3 id="引入" tabindex="-1">引入 <a class="header-anchor" href="#引入" aria-label="Permalink to &quot;引入&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getAllGitRepo,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitCurBranch,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitCommitMessage,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitCommitInfo,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitLastTag,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitCommitsBeforeTag,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitAuthor,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  reCloneGitRemote</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;t-comm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不支持 tree-shaking 的项目</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getAllGitRepo,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitCurBranch,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitCommitMessage,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitCommitInfo,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitLastTag,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitCommitsBeforeTag,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitAuthor,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  reCloneGitRemote</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;t-comm/lib/git/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只支持 ESM 的项目</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getAllGitRepo,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitCurBranch,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitCommitMessage,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitCommitInfo,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitLastTag,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitCommitsBeforeTag,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getGitAuthor,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  reCloneGitRemote</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;t-comm/es/git/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="getallgitrepo-root" tabindex="-1"><code>getAllGitRepo(root)</code> <a class="header-anchor" href="#getallgitrepo-root" aria-label="Permalink to &quot;\`getAllGitRepo(root)\`&quot;">​</a></h3><p><strong>描述</strong>：<p>获取所有 git 仓库</p></p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>root</td><td><code>string</code></td><td><p>根路径</p></td></tr></tbody></table><p><strong>返回</strong>: <code>array</code><br></p><p>路径列表</p><p><strong>示例</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllGitRepo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/root/yang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    root: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    origin: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;git@git.address&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p><a name="getGitCurBranch"></a></p><h3 id="getgitcurbranch" tabindex="-1"><code>getGitCurBranch()</code> <a class="header-anchor" href="#getgitcurbranch" aria-label="Permalink to &quot;\`getGitCurBranch()\`&quot;">​</a></h3><p><strong>描述</strong>：<p>获取当前分支</p></p><p><strong>参数</strong>：</p><p><strong>返回</strong>: <code>string</code><br></p><p>分支名称</p><p><strong>示例</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGitCurBranch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; master</span></span></code></pre></div><p><a name="getGitCommitMessage"></a></p><h3 id="getgitcommitmessage-root-mergecommit-splitmessage" tabindex="-1"><code>getGitCommitMessage(root, mergeCommit, splitMessage)</code> <a class="header-anchor" href="#getgitcommitmessage-root-mergecommit-splitmessage" aria-label="Permalink to &quot;\`getGitCommitMessage(root, mergeCommit, splitMessage)\`&quot;">​</a></h3><p><strong>描述</strong>：<p>获取提交信息</p></p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>root</td><td><code>string</code></td><td><p>根路径</p></td></tr><tr><td>mergeCommit</td><td><code>boolean</code></td><td><p>是否包含 merge 的提交</p></td></tr><tr><td>splitMessage</td><td><code>boolean</code></td><td><p>是否去掉提交信息的前缀</p></td></tr></tbody></table><p><strong>返回</strong>: <code>string</code><br></p><p>提交信息</p><p><strong>示例</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGitCommitMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;优化一部分文档&#39;</span></span></code></pre></div><p><a name="getGitCommitInfo"></a></p><h3 id="getgitcommitinfo-root-mergecommit-splitmessage" tabindex="-1"><code>getGitCommitInfo(root, mergeCommit, splitMessage)</code> <a class="header-anchor" href="#getgitcommitinfo-root-mergecommit-splitmessage" aria-label="Permalink to &quot;\`getGitCommitInfo(root, mergeCommit, splitMessage)\`&quot;">​</a></h3><p><strong>描述</strong>：<p>获取提交信息</p></p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>root</td><td><code>string</code></td><td><p>根路径</p></td></tr><tr><td>mergeCommit</td><td><code>boolean</code></td><td><p>是否包含 merge 的提交</p></td></tr><tr><td>splitMessage</td><td><code>boolean</code></td><td><p>是否去掉提交信息的前缀</p></td></tr></tbody></table><p><strong>返回</strong>: <code>Object</code><br></p><p>提交对象</p><p><strong>示例</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGitCommitInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;novlan1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; 优化一部分文档&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0cb71f9&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2022-10-02 10:34:31 +0800&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  timeStamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1664678071&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;master&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a name="getGitLastTag"></a></p><h3 id="getgitlasttag" tabindex="-1"><code>getGitLastTag()</code> <a class="header-anchor" href="#getgitlasttag" aria-label="Permalink to &quot;\`getGitLastTag()\`&quot;">​</a></h3><p><strong>描述</strong>：<p>获取最新tag</p></p><p><strong>参数</strong>：</p><p><strong>返回</strong>: <code>string</code><br></p><p>最新tag</p><p><a name="getGitCommitsBeforeTag"></a></p><h3 id="getgitcommitsbeforetag-tag" tabindex="-1"><code>getGitCommitsBeforeTag(tag)</code> <a class="header-anchor" href="#getgitcommitsbeforetag-tag" aria-label="Permalink to &quot;\`getGitCommitsBeforeTag(tag)\`&quot;">​</a></h3><p><strong>描述</strong>：<p>获取tag到head的提交数目</p></p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>tag</td><td><code>string</code></td><td><p>git标签</p></td></tr></tbody></table><p><strong>返回</strong>: <code>string</code><br></p><p>tag至今的提交数目</p><p><a name="getGitAuthor"></a></p><h3 id="getgitauthor-ispriorgit" tabindex="-1"><code>getGitAuthor(isPriorGit)</code> <a class="header-anchor" href="#getgitauthor-ispriorgit" aria-label="Permalink to &quot;\`getGitAuthor(isPriorGit)\`&quot;">​</a></h3><p><strong>描述</strong>：<p>获取当前用户</p></p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>isPriorGit</td><td><p>是否优先使用git用户信息</p></td></tr></tbody></table><p><strong>返回</strong>: <p>user</p></p><p><a name="reCloneGitRemote"></a></p><h3 id="reclonegitremote-list" tabindex="-1"><code>reCloneGitRemote(list)</code> <a class="header-anchor" href="#reclonegitremote-list" aria-label="Permalink to &quot;\`reCloneGitRemote(list)\`&quot;">​</a></h3><p><strong>描述</strong>：<p>根据配置表，重新 clone 仓库</p></p><p><strong>参数</strong>：</p><table tabindex="0"><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>list</td><td><code>Array&lt;item&gt;</code></td><td><p>列表</p></td></tr><tr><td>item.root</td><td><code>string</code></td><td><p>路径</p></td></tr><tr><td>item.origin</td><td><code>string</code></td><td><p>origin</p></td></tr></tbody></table>`,60)]))}const E=t(e,[["render",p]]);export{k as __pageData,E as default};
